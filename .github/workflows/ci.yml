name: CI Pipeline

on:
  push:
    branches: [ main ]
    tags: # Запускать публикацию при создании тега
      - 'v*' # Предполагается, что теги имеют формат v1.0.0, v1.0.1 и т.д.
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Manual trigger from UI

env:
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"

jobs:
  build:
    runs-on: ubuntu-latest
    container: maven:3.9.6-eclipse-temurin-17

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Version (if tagged)
        if: github.ref_type == 'tag'
        run: |
          TAG_VERSION="${{ github.ref_name }}"
          MAVEN_VERSION=${TAG_VERSION#v}
          echo "Git tag is $TAG_VERSION, setting Maven version to $MAVEN_VERSION"
          mvn $MAVEN_CLI_OPTS versions:set -DnewVersion=$MAVEN_VERSION -DgenerateBackupPoms=false

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: |
            .m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn $MAVEN_CLI_OPTS compile

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: target-files
          path: target/
          if-no-files-found: ignore

  test:
    runs-on: ubuntu-latest
    container: maven:3.9.6-eclipse-temurin-17
    needs: build
    permissions:
      checks: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Version (if tagged)
        if: github.ref_type == 'tag'
        run: |
          TAG_VERSION="${{ github.ref_name }}"
          MAVEN_VERSION=${TAG_VERSION#v}
          echo "Git tag is $TAG_VERSION, setting Maven version to $MAVEN_VERSION"
          mvn $MAVEN_CLI_OPTS versions:set -DnewVersion=$MAVEN_VERSION -DgenerateBackupPoms=false

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: |
            .m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: target-files
          path: target/

      - name: Run tests
        run: |
          # mvn $MAVEN_CLI_OPTS clean # Обычно не нужно, если артефакты уже собраны
          mvn $MAVEN_CLI_OPTS verify
          mvn $MAVEN_CLI_OPTS jacoco:report

      - name: Upload JUnit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: target/surefire-reports/*.xml

      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: target/site/jacoco/jacoco.xml

      - name: Publish JUnit Test Results
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          report_paths: target/surefire-reports/*.xml
          check_name: JUnit Test Report

  publish:
    name: Publish to Maven Central
    # Запускать только при создании тега (релиз)
    if: github.ref_type == 'tag' && startsWith(github.ref_name, 'v')
    runs-on: ubuntu-latest
    needs: test # Убедиться, что тесты пройдены перед публикацией
    environment: "publish"
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Установка версии из тега
      - name: Set Release Version
        run: |
          TAG_VERSION="${{ github.ref_name }}"
          MAVEN_VERSION=${TAG_VERSION#v}
          echo "Git tag is $TAG_VERSION, setting Maven version to $MAVEN_VERSION"
          mvn $MAVEN_CLI_OPTS versions:set -DnewVersion=$MAVEN_VERSION -DgenerateBackupPoms=false

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: |
            .m2/repository
          key: ${{ runner.os }}-maven-publish-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-publish-

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          server-id: central
          server-username: ${{ secrets.OSSRH_USERNAME }}
          server-password: ${{ secrets.OSSRH_TOKEN }}
          gpg-passphrase: ${{ secrets.GPG_PASSPHRASE }}
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}

      # Выполнить сборку (package), подпись (gpg:sign) и публикацию (deploy)
      # Профиль 'release' активирует плагин maven-gpg-plugin
      - name: Publish to Maven Central (OSSRH)
        run: |
          mvn $MAVEN_CLI_OPTS clean deploy -Prelease -DskipTests
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
